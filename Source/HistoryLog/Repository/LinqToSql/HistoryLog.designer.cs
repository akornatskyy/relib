#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReusableLibrary.HistoryLog.Repository.LinqToSql
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HistoryLog")]
	public partial class HistoryLogDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertItemExtraIp(ReusableLibrary.HistoryLog.Repository.LinqToSql.Entities.ItemExtraIp instance);
    partial void UpdateItemExtraIp(ReusableLibrary.HistoryLog.Repository.LinqToSql.Entities.ItemExtraIp instance);
    partial void DeleteItemExtraIp(ReusableLibrary.HistoryLog.Repository.LinqToSql.Entities.ItemExtraIp instance);
    partial void InsertItem(ReusableLibrary.HistoryLog.Repository.LinqToSql.Entities.Item instance);
    partial void UpdateItem(ReusableLibrary.HistoryLog.Repository.LinqToSql.Entities.Item instance);
    partial void DeleteItem(ReusableLibrary.HistoryLog.Repository.LinqToSql.Entities.Item instance);
    partial void InsertEvent(ReusableLibrary.HistoryLog.Repository.LinqToSql.Entities.Event instance);
    partial void UpdateEvent(ReusableLibrary.HistoryLog.Repository.LinqToSql.Entities.Event instance);
    partial void DeleteEvent(ReusableLibrary.HistoryLog.Repository.LinqToSql.Entities.Event instance);
    #endregion
		
		public HistoryLogDataContext() : 
				base("Data Source=.\\SQLEXPRESS;Initial Catalog=HistoryLog;Integrated Security=True", mappingSource)
		{
			OnCreated();
		}
		
		public HistoryLogDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HistoryLogDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HistoryLogDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HistoryLogDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		internal System.Data.Linq.Table<ReusableLibrary.HistoryLog.Repository.LinqToSql.Entities.ItemExtraIp> ItemExtraIps
		{
			get
			{
				return this.GetTable<ReusableLibrary.HistoryLog.Repository.LinqToSql.Entities.ItemExtraIp>();
			}
		}
		
		internal System.Data.Linq.Table<ReusableLibrary.HistoryLog.Repository.LinqToSql.Entities.Item> Items
		{
			get
			{
				return this.GetTable<ReusableLibrary.HistoryLog.Repository.LinqToSql.Entities.Item>();
			}
		}
		
		internal System.Data.Linq.Table<ReusableLibrary.HistoryLog.Repository.LinqToSql.Entities.Event> Events
		{
			get
			{
				return this.GetTable<ReusableLibrary.HistoryLog.Repository.LinqToSql.Entities.Event>();
			}
		}
	}
}
namespace ReusableLibrary.HistoryLog.Repository.LinqToSql.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HistoryLog.ItemExtraIp")]
	internal partial class ItemExtraIp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemId;
		
		private int _Ip;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnIpChanging(int value);
    partial void OnIpChanged();
    #endregion
		
		public ItemExtraIp()
		{
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ip", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Ip
		{
			get
			{
				return this._Ip;
			}
			set
			{
				if ((this._Ip != value))
				{
					this.OnIpChanging(value);
					this.SendPropertyChanging();
					this._Ip = value;
					this.SendPropertyChanged("Ip");
					this.OnIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemExtraIp", Storage="_Item", ThisKey="ItemId", OtherKey="ItemId", IsForeignKey=true)]
		internal Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.ItemExtraIps.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.ItemExtraIps.Add(this);
						this._ItemId = value.ItemId;
					}
					else
					{
						this._ItemId = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HistoryLog.Item")]
	internal partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemId;
		
		private short _EventId;
		
		private string _OriginatorId;
		
		private int _Ip;
		
		private System.DateTime _Timestamp;
		
		private string _RelatedTo;
		
		private string _Arguments;
		
		private EntitySet<ItemExtraIp> _ItemExtraIps;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnEventIdChanging(short value);
    partial void OnEventIdChanged();
    partial void OnOriginatorIdChanging(string value);
    partial void OnOriginatorIdChanged();
    partial void OnIpChanging(int value);
    partial void OnIpChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnRelatedToChanging(string value);
    partial void OnRelatedToChanged();
    partial void OnArgumentsChanging(string value);
    partial void OnArgumentsChanged();
    #endregion
		
		public Item()
		{
			this._ItemExtraIps = new EntitySet<ItemExtraIp>(new Action<ItemExtraIp>(this.attach_ItemExtraIps), new Action<ItemExtraIp>(this.detach_ItemExtraIps));
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="SmallInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public short EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginatorId", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string OriginatorId
		{
			get
			{
				return this._OriginatorId;
			}
			set
			{
				if ((this._OriginatorId != value))
				{
					this.OnOriginatorIdChanging(value);
					this.SendPropertyChanging();
					this._OriginatorId = value;
					this.SendPropertyChanged("OriginatorId");
					this.OnOriginatorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ip", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Ip
		{
			get
			{
				return this._Ip;
			}
			set
			{
				if ((this._Ip != value))
				{
					this.OnIpChanging(value);
					this.SendPropertyChanging();
					this._Ip = value;
					this.SendPropertyChanged("Ip");
					this.OnIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelatedTo", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string RelatedTo
		{
			get
			{
				return this._RelatedTo;
			}
			set
			{
				if ((this._RelatedTo != value))
				{
					this.OnRelatedToChanging(value);
					this.SendPropertyChanging();
					this._RelatedTo = value;
					this.SendPropertyChanged("RelatedTo");
					this.OnRelatedToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Arguments", DbType="VarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Arguments
		{
			get
			{
				return this._Arguments;
			}
			set
			{
				if ((this._Arguments != value))
				{
					this.OnArgumentsChanging(value);
					this.SendPropertyChanging();
					this._Arguments = value;
					this.SendPropertyChanged("Arguments");
					this.OnArgumentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemExtraIp", Storage="_ItemExtraIps", ThisKey="ItemId", OtherKey="ItemId")]
		internal EntitySet<ItemExtraIp> ItemExtraIps
		{
			get
			{
				return this._ItemExtraIps;
			}
			set
			{
				this._ItemExtraIps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Item", Storage="_Event", ThisKey="EventId", OtherKey="EventId", IsForeignKey=true)]
		internal Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._EventId = value.EventId;
					}
					else
					{
						this._EventId = default(short);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ItemExtraIps(ItemExtraIp entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_ItemExtraIps(ItemExtraIp entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HistoryLog.Event")]
	internal partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _EventId;
		
		private string _Name;
		
		private string _Format;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(short value);
    partial void OnEventIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFormatChanging(string value);
    partial void OnFormatChanged();
    #endregion
		
		public Event()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Format", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Format
		{
			get
			{
				return this._Format;
			}
			set
			{
				if ((this._Format != value))
				{
					this.OnFormatChanging(value);
					this.SendPropertyChanging();
					this._Format = value;
					this.SendPropertyChanged("Format");
					this.OnFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Item", Storage="_Items", ThisKey="EventId", OtherKey="EventId")]
		internal EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
}
#pragma warning restore 1591
